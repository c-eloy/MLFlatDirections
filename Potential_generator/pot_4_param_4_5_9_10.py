
import tensorflow as tf
import numpy as np

dim = 4

def V(x):
    """
    0.125 * (tf.exp(-4 * (3 ** -0.5) * x9)) * (20 * (tf.exp(4 * (3 ** -0.5) * x9)) + 8 * (tf.exp(2 * (3 ** -0.5) * x9)) * (-1 + 4 * (x4 ** 2)) + 4 * ((1 + 4 * (x4 ** 2)) ** 2) -4 * (tf.exp(5 * (3 ** -0.5) * x9)) * (4 + x10 ** 2 -8 * (x5 ** 2)) -4 * (tf.exp((np.sqrt(3)) * x9)) * (4 + (x10 ** 2) * (1 + 4 * (x4 ** 2)) + 8 * (x5 ** 2) + (x4 ** 2) * (16 -32 * (x5 ** 2))) + (tf.exp(2 * (np.sqrt(3)) * x9)) * (x10 ** 4 + 64 * (x5 ** 4) + 8 * (x10 ** 2) * (1 + 2 * (x5 ** 2))))
    """

    x4,x5,x9,x10=tf.split(x, dim, axis=1)

    return 0.125 * (tf.exp(-4 * (3 ** -0.5) * x9)) * (20 * (tf.exp(4 * (3 ** -0.5) * x9)) + 8 * (tf.exp(2 * (3 ** -0.5) * x9)) * (-1 + 4 * (x4 ** 2)) + 4 * ((1 + 4 * (x4 ** 2)) ** 2) -4 * (tf.exp(5 * (3 ** -0.5) * x9)) * (4 + x10 ** 2 -8 * (x5 ** 2)) -4 * (tf.exp((np.sqrt(3)) * x9)) * (4 + (x10 ** 2) * (1 + 4 * (x4 ** 2)) + 8 * (x5 ** 2) + (x4 ** 2) * (16 -32 * (x5 ** 2))) + (tf.exp(2 * (np.sqrt(3)) * x9)) * (x10 ** 4 + 64 * (x5 ** 4) + 8 * (x10 ** 2) * (1 + 2 * (x5 ** 2))))